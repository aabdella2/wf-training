<!--
	~ Levels Beyond CONFIDENTIAL
	~
	~ Copyright 2003 - 2020 Levels Beyond Incorporated
	~ All Rights Reserved.
	~
	~ NOTICE:  All information contained herein is, and remains
	~ the property of Levels Beyond Incorporated and its suppliers,
	~ if any.  The intellectual and technical concepts contained
	~ herein are proprietary to Levels Beyond Incorporated
	~ and its suppliers and may be covered by U.S. and Foreign Patents,
	~ patents in process, and are protected by trade secret or copyright law.
	~ Dissemination of this information or reproduction of this material
	~ is unlawful and strictly forbidden unless prior written permission is obtained
	~ from Levels Beyond Incorporated.
	-->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://levelsbeyond.com/schema/workflow"
	xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
	xsi:schemaLocation="http://levelsbeyond.com/schema/latest http://levelsbeyond.com/schema/latest/studio.xsd"
	id="parseXmlToJson"
	name="Parse Xml To Json"
	executionLabelExpression="Parse Xml To Json"
	subjectDOClassName=""
	showInUserInterface="false"
	sdkVersion=""
>
	
	<initialStepName>parse xml for json metadata</initialStepName>
	
	<groovyStep name="parse xml for json metadata"
		executionLabelExpression="parsing xml for json metadata"
		resultDataDef="jsonMetadata"
		nextStep="end"
	>
		<script>
			<![CDATA[
			
			def fields = xmlFile.getChild("fields")
			def xmlMap = [:]
			
			if (fields != null) {
				fields.getChildren().each { field ->
					
					def key = field.getChildText('name')
					def val = field.getChildText('value')
					
					if (val != null) {
						xmlMap."$key" = val
					}
				}
			}
			
			xmlMapping.fieldNames().each { key ->
				if (xmlMap.containsKey(key.toString()) && xmlMap."$key".toString().length() != 0) {
					jsonMetadata.put(xmlMapping."$key".textValue(), xmlMap."$key".toString())
				}
			}
			
			return jsonMetadata
			
			]]>
		</script>
	</groovyStep>
	
	<!-- ................................................... End Steps .................................................... -->
	<!-- success -->
	<noopStep name="end"/>
	
	<!-- ................................................... Data Defs .................................................... -->
	<!-- ............ INPUT ............. -->
	
	<contextDataDef name="xmlFile" dataType="XML" >
		<defaultDataExpression>
			<![CDATA[
			<xmlResponse>
				<fields>
					<field>
						<name>key1</name>
						<value>val1</value>
					</field>
					<field>
						<name>key2</name>
						<value>true</value>
					</field>
					<field>
						<name>key3</name>
						<value>555.0</value>
					</field>
					<field>
						<name>key4</name>
						<value>junkVal1</value>
					</field>
				</fields>
			</xmlResponse>
			]]>
		</defaultDataExpression>
	</contextDataDef>
	
	<contextDataDef name="xmlMapping" dataType="JSON" >
		<defaultDataExpression>
			<![CDATA[
				{
					"key1" : "testValueA1",
					"key2" : "testBoolean",
					"key3" : "testValueA"				}
            ]]>
		</defaultDataExpression>
	</contextDataDef>
	
	<contextDataDef name="jsonMetadata" dataType="JSON"  defaultDataExpression="{}"  />
	
	<!-- ......... PROCESSING ........... -->
</workflow>
